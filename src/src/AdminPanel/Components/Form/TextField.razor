@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@inherits NotifyableInputBase<string>

    <div>
        <FieldLabel Text="@Label" ValueExpression="@this.ValueExpression" />
        <input @bind="CurrentValue" id="@this.FieldIdentifier.FieldName" class="@CssClass" />
        <ValidationMessage For=@this.ValueExpression />
    </div>

@code {

    /// <summary>
    /// Gets or sets the label which should be displayed. If it's not explicitly provided, the component shows the
    /// Name defined in the <see cref="DisplayAttribute"/>. If there is no Name in a <see cref="DisplayAttribute"/>, it shows the property name instead.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null;
        return true;
    }
}
